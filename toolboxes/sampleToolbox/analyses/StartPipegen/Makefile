#
#    This makefile was generated by pipe-gen
#
#    Friday, May 8 2015.
#    11:04 AM
#


# Define list of ID's
IDLIST = id0 id1 id2 id3 id4 id5

# Define list of setup subroutines
SETUPLIST = setup0 setup1 setup2 setup3 setup4 setup5

# Define input path
INPUT = /home/mstockma/pipe-gen/src/test/workingDir/results/

# Define output path
OUTPUT = /home/mstockma/pipe-gen/src/test/workingDir/results/

# Define processing directory
PROCESSING = ./PROCESSING_DIRECTORY/

# Define error log directory
ERRORS = ./ERROR_LOG/

# Target all ID's for analysis
all: $(IDLIST)
.PHONY: all
.PHONY: $(IDLIST)

id0:$(OUTPUT)outputTextFile_1.txt
id1:$(OUTPUT)outputTextFile_0.txt
id2:$(OUTPUT)outputTextFile_2.txt
id3:$(OUTPUT)outputTextFile_3.txt
id4:$(OUTPUT)outputTextFile_4.txt
id5:$(OUTPUT)outputTextFile_5.txt

# Implement setup subroutines
.PHONY: setupall
setupall: $(SETUPLIST)

setuperror: cleanerror
	mkdir -p $(ERRORS)

.PHONY: $(SETUPLIST)

setup0: setuperror
	mkdir -p $(PROCESSING)/0

setup1: setuperror
	mkdir -p $(PROCESSING)/1

setup2: setuperror
	mkdir -p $(PROCESSING)/2

setup3: setuperror
	mkdir -p $(PROCESSING)/3

setup4: setuperror
	mkdir -p $(PROCESSING)/4

setup5: setuperror
	mkdir -p $(PROCESSING)/5

#--------------------------------------------------------
# Dependency tree for id0_sink1 follows...
#    ID = 0
#    SINK = 1

# ... visited SINK outputName, ID = 0
$(OUTPUT)outputTextFile_1.txt: $(PROCESSING)0/0_0.txt
	cp $(PROCESSING)0/0_0.txt $(OUTPUT)outputTextFile_1.txt

# ... visited MODULE, ID = 0
$(PROCESSING)0/0_0.txt:  $(INPUT)textFile_0.txt
	cp $(INPUT)textFile_0.txt $(PROCESSING)0/0_0.txt

# Dependency tree for id1_sink1 follows...
#    ID = 1
#    SINK = 1

# ... visited SINK outputName, ID = 1
$(OUTPUT)outputTextFile_0.txt: $(PROCESSING)1/0_0.txt
	cp $(PROCESSING)1/0_0.txt $(OUTPUT)outputTextFile_0.txt

# ... visited MODULE, ID = 1
$(PROCESSING)1/0_0.txt:  $(INPUT)textFile_1.txt
	cp $(INPUT)textFile_1.txt $(PROCESSING)1/0_0.txt

# Dependency tree for id2_sink1 follows...
#    ID = 2
#    SINK = 1

# ... visited SINK outputName, ID = 2
$(OUTPUT)outputTextFile_2.txt: $(PROCESSING)2/0_0.txt
	cp $(PROCESSING)2/0_0.txt $(OUTPUT)outputTextFile_2.txt

# ... visited MODULE, ID = 2
$(PROCESSING)2/0_0.txt:  $(INPUT)textFile_2.txt
	cp $(INPUT)textFile_2.txt $(PROCESSING)2/0_0.txt

# Dependency tree for id3_sink1 follows...
#    ID = 3
#    SINK = 1

# ... visited SINK outputName, ID = 3
$(OUTPUT)outputTextFile_3.txt: $(PROCESSING)3/0_0.txt
	cp $(PROCESSING)3/0_0.txt $(OUTPUT)outputTextFile_3.txt

# ... visited MODULE, ID = 3
$(PROCESSING)3/0_0.txt:  $(INPUT)textFile_3.txt
	cp $(INPUT)textFile_3.txt $(PROCESSING)3/0_0.txt

# Dependency tree for id4_sink1 follows...
#    ID = 4
#    SINK = 1

# ... visited SINK outputName, ID = 4
$(OUTPUT)outputTextFile_4.txt: $(PROCESSING)4/0_0.txt
	cp $(PROCESSING)4/0_0.txt $(OUTPUT)outputTextFile_4.txt

# ... visited MODULE, ID = 4
$(PROCESSING)4/0_0.txt:  $(INPUT)textFile_4.txt
	cp $(INPUT)textFile_4.txt $(PROCESSING)4/0_0.txt

# Dependency tree for id5_sink1 follows...
#    ID = 5
#    SINK = 1

# ... visited SINK outputName, ID = 5
$(OUTPUT)outputTextFile_5.txt: $(PROCESSING)5/0_0.txt
	cp $(PROCESSING)5/0_0.txt $(OUTPUT)outputTextFile_5.txt

# ... visited MODULE, ID = 5
$(PROCESSING)5/0_0.txt:  $(INPUT)textFile_5.txt
	cp $(INPUT)textFile_5.txt $(PROCESSING)5/0_0.txt

#--------------------------------------------------------

# Declare cleaning targets
.PHONY: cleanall cleanerror cleanprocess

cleanall: cleanerror cleanprocess

cleanerror:
	rm -f $(ERRORS)* 

cleanprocess:
	rm -f $(PROCESSING)*/* 

