#
#    This makefile was generated by pipe-gen
#
#    Friday, May 8 2015.
#    03:08 PM
#


# Define list of ID's
IDLIST = id0 id1 id2 id3 id4 id5

# Define list of setup subroutines
SETUPLIST = setup0 setup1 setup2 setup3 setup4 setup5

# Define input path
INPUT = /home/mstockma/pipe-gen/tempInput/

# Define output path
OUTPUT = /home/mstockma/pipe-gen/./workspace/

# Define processing directory
PROCESSING = ./PROCESSING_DIRECTORY/

# Define error log directory
ERRORS = ./ERROR_LOG/

# Target all ID's for analysis
all: $(IDLIST)
.PHONY: all
.PHONY: $(IDLIST)

id0:$(OUTPUT)output_1.nii.gz
id1:$(OUTPUT)output_0.nii.gz
id2:$(OUTPUT)output_2.nii.gz
id3:$(OUTPUT)output_3.nii.gz
id4:$(OUTPUT)output_4.nii.gz
id5:$(OUTPUT)output_5.nii.gz

# Implement setup subroutines
.PHONY: setupall
setupall: $(SETUPLIST)

setuperror: cleanerror
	mkdir -p $(ERRORS)

.PHONY: $(SETUPLIST)

setup0: setuperror
	mkdir -p $(PROCESSING)/0

setup1: setuperror
	mkdir -p $(PROCESSING)/1

setup2: setuperror
	mkdir -p $(PROCESSING)/2

setup3: setuperror
	mkdir -p $(PROCESSING)/3

setup4: setuperror
	mkdir -p $(PROCESSING)/4

setup5: setuperror
	mkdir -p $(PROCESSING)/5

#--------------------------------------------------------
# Dependency tree for id0_sink2 follows...
#    ID = 0
#    SINK = 2

# ... visited SINK outputNIFTI, ID = 0
$(OUTPUT)output_1.nii.gz: $(PROCESSING)0/3_0.nii.gz
	cp $(PROCESSING)0/3_0.nii.gz $(OUTPUT)output_1.nii.gz

# ... visited MODULE, ID = 0
$(PROCESSING)0/3_0.nii.gz:  $(INPUT)dicom_0.dcm
	sleep 2s ; cp $(INPUT)dicom_0.dcm $(PROCESSING)0/3_0.nii.gz

# Dependency tree for id1_sink2 follows...
#    ID = 1
#    SINK = 2

# ... visited SINK outputNIFTI, ID = 1
$(OUTPUT)output_0.nii.gz: $(PROCESSING)1/3_0.nii.gz
	cp $(PROCESSING)1/3_0.nii.gz $(OUTPUT)output_0.nii.gz

# ... visited MODULE, ID = 1
$(PROCESSING)1/3_0.nii.gz:  $(INPUT)dicom_1.dcm
	sleep 2s ; cp $(INPUT)dicom_1.dcm $(PROCESSING)1/3_0.nii.gz

# Dependency tree for id2_sink2 follows...
#    ID = 2
#    SINK = 2

# ... visited SINK outputNIFTI, ID = 2
$(OUTPUT)output_2.nii.gz: $(PROCESSING)2/3_0.nii.gz
	cp $(PROCESSING)2/3_0.nii.gz $(OUTPUT)output_2.nii.gz

# ... visited MODULE, ID = 2
$(PROCESSING)2/3_0.nii.gz:  $(INPUT)dicom_2.dcm
	sleep 2s ; cp $(INPUT)dicom_2.dcm $(PROCESSING)2/3_0.nii.gz

# Dependency tree for id3_sink2 follows...
#    ID = 3
#    SINK = 2

# ... visited SINK outputNIFTI, ID = 3
$(OUTPUT)output_3.nii.gz: $(PROCESSING)3/3_0.nii.gz
	cp $(PROCESSING)3/3_0.nii.gz $(OUTPUT)output_3.nii.gz

# ... visited MODULE, ID = 3
$(PROCESSING)3/3_0.nii.gz:  $(INPUT)dicom_3.dcm
	sleep 2s ; cp $(INPUT)dicom_3.dcm $(PROCESSING)3/3_0.nii.gz

# Dependency tree for id4_sink2 follows...
#    ID = 4
#    SINK = 2

# ... visited SINK outputNIFTI, ID = 4
$(OUTPUT)output_4.nii.gz: $(PROCESSING)4/3_0.nii.gz
	cp $(PROCESSING)4/3_0.nii.gz $(OUTPUT)output_4.nii.gz

# ... visited MODULE, ID = 4
$(PROCESSING)4/3_0.nii.gz:  $(INPUT)dicom_4.dcm
	sleep 2s ; cp $(INPUT)dicom_4.dcm $(PROCESSING)4/3_0.nii.gz

# Dependency tree for id5_sink2 follows...
#    ID = 5
#    SINK = 2

# ... visited SINK outputNIFTI, ID = 5
$(OUTPUT)output_5.nii.gz: $(PROCESSING)5/3_0.nii.gz
	cp $(PROCESSING)5/3_0.nii.gz $(OUTPUT)output_5.nii.gz

# ... visited MODULE, ID = 5
$(PROCESSING)5/3_0.nii.gz:  $(INPUT)dicom_5.dcm
	sleep 2s ; cp $(INPUT)dicom_5.dcm $(PROCESSING)5/3_0.nii.gz

#--------------------------------------------------------

# Declare cleaning targets
.PHONY: cleanall cleanerror cleanprocess

cleanall: cleanerror cleanprocess

cleanerror:
	rm -f $(ERRORS)* 

cleanprocess:
	rm -f $(PROCESSING)*/* 

